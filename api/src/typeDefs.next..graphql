interface Game {
  name: String!
  state: String!
  minPlayers: Int
  maxPlayers: Int
  playerCount: Int!
  players: [Player!]!
}

interface Callout {
  name: String!
  state: String!
}

interface Instructions {
  game: Game!
  end: Boolean!
}

type Player {
  login: ID!
  avatar: String
  name: String
  team: Team
  hometown: String
  instructions: Instructions
}

input NewPlayerForm {
  name: String
  hometown: String
  favDatabase: String
}

type Team {
  color: Color!
  players: [Player!]!
}

type Color {
  name: String!
  hex: String!
  rgb: String!
  text: String!
  negate: String!
}

type AuthorizationPayload {
  token: ID!
  player: Player!
}

type Query {
  me: Player
  currentGame: Game
  allPlayers(onDeck: Boolean, first: Int): [Player!]!
  playerCount(onDeck: Boolean): Int!
  allTeams: [Team!]!
  Team(colorName: String!): Team
  githubAuthorizationUrl: String!
}

type PickPayload {
  count: Int!
  player: Player!
}

type Mutation {
  githubAuthorization(code: String!): AuthorizationPayload!
  logout: Boolean
  createTeams(count: Int): [Team!]!
  destroyTeams: Boolean
  startGame: Game
  endGame: Boolean
  pickPlayer: PickPayload!
  putBackPlayer(login: ID): PickPayload!
  end: Boolean!
}

type Subscription {
  instructions: Instructions!
  game: Game!
  callout: Callout!
}
