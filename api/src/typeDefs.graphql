interface Game {
  name: String!
  state: String!
  minPlayers: Int!
  maxPlayers: Int!
  playerCount: Int!
  players: [Player!]!
}

type PerfIsRight implements Game {
  name: String!
  state: String!
  minPlayers: Int!
  maxPlayers: Int!
  playerCount: Int!
  players: [Player!]!
  guesses: [Int!]!
  winner: Winner
}

type PerfIsRightFinal implements Game {
  name: String!
  state: String!
  minPlayers: Int!
  maxPlayers: Int!
  playerCount: Int!
  players: [Player!]!
}

type Wejay implements Game {
  name: String!
  state: String!
  minPlayers: Int!
  maxPlayers: Int!
  playerCount: Int!
  players: [Player!]!
}

type FightTally {
  leader: FightTech
  node: Int
  react: Int
  graphql: Int
  typescript: Int
}

type Fightjay implements Game {
  name: String!
  state: String!
  minPlayers: Int!
  maxPlayers: Int!
  playerCount: Int!
  players: [Player!]!
  results: FightTally
}

interface Callout {
  name: String!
  state: String!
}

type AudiencePoll implements Callout {
  name: String!
  state: String!
  results: Poll!
}

type Faces implements Callout {
  name: String!
  state: String!
}

type Spotlight implements Callout {
  name: String!
  state: String!
}

type Instructions {
  game: Game
  callout: Callout
  end: Boolean!
}

type Player {
  login: ID!
  name: String
  hometown: String
  avatar: String
  team: Team
  instructions: Instructions
  guess: Int
  duration: Int
}

input NewPlayerForm {
  name: String
  hometown: String
  favDatabase: String
}

type Team {
  color: Color!
  players: [Player!]!
}

type Color {
  name: String!
  hex: String!
  rgb: String!
  text: String!
  negate: String!
}

type AuthorizationPayload {
  token: ID!
  player: Player!
}

type Poll {
  question: String
  yesLabel: String
  noLabel: String
  yes: Int!
  no: Int!
}

type Winner {
  answer: Int
  player: Player
}

type Query {
  me: Player
  currentGame: Game
  allPlayers(onDeck: Boolean, first: Int): [Player!]!
  playerCount(onDeck: Boolean): Int!
  allTeams: [Team!]!
  Team(colorName: String!): Team
  githubAuthorizationUrl: String!
  pollResults: Poll
  instructions: Instructions
  game: Game
  callout: Callout
}

type PickPayload {
  count: Int!
  player: Player!
}

enum FightTech {
  NODE
  REACT
  GRAPHQL
  TYPESCRIPT
}

type Mutation {
  githubAuthorization(code: String!): AuthorizationPayload!
  logout: Boolean
  createTeams(count: Int): [Team!]!
  destroyTeams: Boolean
  pickPlayer: PickPayload!
  putBackPlayer(login: ID): PickPayload!
  endCallout: Boolean!
  endGame: Boolean!
  end: Boolean!
  startAudiencePoll(question: String, yesLabel: String, noLabel: String): Poll!
  startFightjay: Fightjay!
  startFaces: Faces!
  startSpotlight: Spotlight!
  startWejay: Wejay!
  startPerfIsRight: PerfIsRight!
  startPerfIsRightFinal: PerfIsRightFinal!
  vote(tally: Boolean!): Boolean!
  fight(choice: FightTech!): Boolean!
  changeGameState(newState: String!): Game!
  guess(perf: Int!): Boolean!
  sendMeasure(duration: Int!): Boolean!
  showWinner: Winner!
}

type Subscription {
  me: Player
  game: Game
  callout: Callout
  performance: String
}
